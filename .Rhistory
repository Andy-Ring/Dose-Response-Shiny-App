library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Calculate the average and standard error for each Stage
summary_df <- df_filtered %>%
group_by(Stage) %>%
summarise(across(-Sample, list(mean = mean, se = ~ sd(.)/sqrt(n())), .names = "{col}_{fn}")) %>%
pivot_longer(-Stage, names_to = "Metric", values_to = "Value") %>%
separate(Metric, into = c("Cell_Type", "Stat"), sep = "_") %>%
pivot_wider(names_from = "Stat", values_from = "Value") %>%
mutate(mean = as.numeric(mean), se = as.numeric(se))
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Calculate the average and standard error for each Stage
summary_df <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance") %>%
group_by(Stage, Cell_Type) %>%
summarise(mean = mean(Abundance, na.rm = TRUE),
se = sd(Abundance, na.rm = TRUE) / sqrt(n()), .groups = "drop")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance") %>%
group_by(Cell_Type) %>%
summarise(p_value = list(kruskal_test(Abundance ~ Stage, data = cur_data())$p)) %>%
unnest(cols = c(p_value)) %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Prepare data for plotting
plot_data <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
# Plot
ggplot(plot_data, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = summary_long, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = summary_long, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Reshape data to long format
long_df <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
# Calculate the average and standard error for each Stage
summary_df <- long_df %>%
group_by(Stage, Cell_Type) %>%
summarise(mean = mean(Abundance, na.rm = TRUE),
se = sd(Abundance, na.rm = TRUE) / sqrt(n()), .groups = "drop")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- long_df %>%
group_by(Cell_Type) %>%
summarise(p_value = kruskal_test(Abundance ~ Stage, data = cur_data())$p, .groups = "drop") %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Plot
ggplot(long_df, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = summary_long, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = summary_long, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
View(long_df)
remove.packages("rlang")
install.packages("rlang")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% dplyr::select(where(~ any(. != 0)))
df <- read.csv("CIBERSORTx_Job3_Results.csv", header = T)
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Reshape data to long format
long_df <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
# Calculate the average and standard error for each Stage
summary_df <- long_df %>%
group_by(Stage, Cell_Type) %>%
summarise(mean = mean(Abundance, na.rm = TRUE),
se = sd(Abundance, na.rm = TRUE) / sqrt(n()), .groups = "drop")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- long_df %>%
group_by(Cell_Type) %>%
summarise(p_value = kruskal_test(Abundance ~ Stage, data = cur_data())$p, .groups = "drop") %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Plot
ggplot(long_df, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = summary_long, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = summary_long, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Load data
df <- read.csv("your_data.csv")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Reshape data to long format
long_df <- df_filtered %>%
pivot_longer(cols = -c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
# Calculate the average and standard error for each Stage
summary_df <- long_df %>%
group_by(Stage, Cell_Type) %>%
summarise(mean = mean(Abundance, na.rm = TRUE),
se = sd(Abundance, na.rm = TRUE) / sqrt(n()), .groups = "drop")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- long_df %>%
group_by(Cell_Type) %>%
summarise(p_value = kruskal_test(data = cur_data(), formula = Abundance ~ Stage)$p, .groups = "drop") %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Ensure numeric conversion
df_plot <- summary_long %>%
mutate(mean = as.numeric(mean), se = as.numeric(se))
# Plot
ggplot(long_df, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = df_plot, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = df_plot, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
rlang::last_trace()
View(df_plot)
shiny::runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Growth Curve Shiny App/Growth-Curve-Analysis-Shiny-App')
library(rsconnect)
rsconnect::deployApp("C://Users//andym//OneDrive - University of Georgia//Documents//Growth Curve Shiny App//Growth-Curve-Analysis-Shiny-App")
library(tximport)
library(tximport)
sample_dirs <- list.files(path = "C://Users//andym//Documents//miRNA_Analysis//Kallisto2//Total", full.names = TRUE)
files <- file.path(sample_dirs, "abundance.tsv")
names(files) <- c(basename(sample_dirs))  # Name your samples
txi <- tximport(files, type = "kallisto", txOut = TRUE, countsFromAbundance = "scaledTPM")
str(txi)
library(DESeq2)
library(RColorBrewer)
library(pheatmap)
library(PoiClaClu)
library(ggplot2)
library(genefilter)
library(EnhancedVolcano)
library(dplyr)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dendextend)
library(vsn)
library(sva)
library(mixOmics)
library(hrbrthemes)
library(viridis)
library(ggbreak)
library(tximport)
colnames <- read.csv("miRNA_metadata.csv", row.names = 1) #load the column data file for Deseq2
dds <- DESeqDataSetFromTximport(txi,
colData = colnames,
design = ~ Diagnosis + Type)
View(colnames)
View(txi)
colnames <- read.csv("miRNA_metadata.csv", row.names = 1) #load the column data file for Deseq2
dds <- DESeqDataSetFromTximport(txi,
colData = colnames,
design = ~ Diagnosis + Type)
head(txi)
View(colnames)
# Check if rownames of df1 match colnames of df2
all(rownames(colnames) == colnames(txi$counts))
print(rownames(colnames))
print(colnames(txi$counts))
colnames <- read.csv("miRNA_metadata.csv", row.names = 1) #load the column data file for Deseq2
dds <- DESeqDataSetFromTximport(txi,
colData = colnames,
design = ~ Diagnosis + Type)
dds <- DESeq(dds)
rlog <- rlog(dds)
plotPCA(rlog, intgroup = c("Type", "Diagnosis"))
ggsave("miRNA-Seq PCA Plot.png", dpi=1200, height=8, width = 12)
colnames <- read.csv("miRNA_metadata.csv", row.names = 1) #load the column data file for Deseq2
dds <- DESeqDataSetFromTximport(txi,
colData = colnames,
design = ~ Patient + Type)
library(tximport)
sample_dirs <- list.files(path = "C://Users//andym//Documents//miRNA_Analysis//Kallisto2//Total", full.names = TRUE)
files <- file.path(sample_dirs, "abundance.tsv")
names(files) <- c(basename(sample_dirs))  # Name your samples
txi <- tximport(files, type = "kallisto", txOut = TRUE, countsFromAbundance = "scaledTPM")
str(txi)
library(DESeq2)
library(RColorBrewer)
library(pheatmap)
library(PoiClaClu)
library(ggplot2)
library(genefilter)
library(EnhancedVolcano)
library(dplyr)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dendextend)
library(vsn)
library(sva)
library(mixOmics)
library(hrbrthemes)
library(viridis)
library(ggbreak)
library(tximport)
colnames <- read.csv("miRNA_metadata.csv", row.names = 1) #load the column data file for Deseq2
dds <- DESeqDataSetFromTximport(txi,
colData = colnames,
design = ~ Patient + Type)
dds <- DESeq(dds)
rlog <- rlog(dds)
plotPCA(rlog, intgroup = c("Type", "Diagnosis"))
ggsave("miRNA-Seq PCA Plot.png", dpi=1200, height=8, width = 12)
plotPCA(rlog, intgroup = c("Type", "Patient"))
ggsave("miRNA-Seq PCA Plot new.png", dpi=1200, height=8, width = 12)
mat <- counts(dds, normalized = T)
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) <- colnames(mat)
mat.z <- mat.z[complete.cases(mat.z), ]
pheatmap(mat.z,
show_rownames = F,
show_colnames = T,
annotation_col = colnames,
annotation_names_row = T,
color = viridis_pal(direction = 1, option = "D")(100),
filename = "miRNA Heatmap new.png",
height = 18,
width = 12)
exosome_dirs <- list.files(path = "C://Users//andym//Documents//miRNA_Analysis//Kallisto//Exosomes", full.names = TRUE)
files <- file.path(exosome_dirs, "abundance.tsv")
names(files) <- c(basename(exosome_dirs))  # Name your samples
txi_exosomes <- tximport(files, type = "kallisto", txOut = TRUE, countsFromAbundance = "scaledTPM")
colnames_exosomes <- read.csv("miRNA_metadata_exosomes.csv", row.names = 1) #load the column data file for Deseq2
dds_exosomes <- DESeqDataSetFromTximport(txi_exosomes,
colData = colnames_exosomes,
design = ~ Patient)
View(colnames_exosomes)
View(txi_exosomes)
exosome_dirs <- list.files(path = "C://Users//andym//Documents//miRNA_Analysis//Kallisto2//Exosomes", full.names = TRUE)
files <- file.path(exosome_dirs, "abundance.tsv")
names(files) <- c(basename(exosome_dirs))  # Name your samples
txi_exosomes <- tximport(files, type = "kallisto", txOut = TRUE, countsFromAbundance = "scaledTPM")
colnames_exosomes <- read.csv("miRNA_metadata_exosomes.csv", row.names = 1) #load the column data file for Deseq2
dds_exosomes <- DESeqDataSetFromTximport(txi_exosomes,
colData = colnames_exosomes,
design = ~ Patient)
dds_exosomes <- DESeq(dds_exosomes)
resultsNames(dds_exosomes)
results <- results(dds_exosomes, contrast = c("Patient", "4UG", "4VG"))
results <- as.data.frame(results)
results_sig_E <- results %>%
filter(padj < 0.05, abs(log2FoldChange) > 1)
write.csv(results_sig_E, "Significant miRNAs 4UG Exosomes vs 4VG Exosomes.csv")
top_genes <- head(results_sig_E[order(results_sig_E$padj), ], 10)
gene_labs <- row.names(top_genes)
View(results_sig_E)
EnhancedVolcano(results,
x = "log2FoldChange",
y = "padj",
lab = row.names(results),
selectLab  = c(gene_labs),
FCcutoff = 1,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-12,11),
ylim = c(0, -log10(10e-130)),
labSize = 5.0,
pointSize = 5.0,
boxedLabels = TRUE)
ggsave("miRNA 4VG Exosomes vs Wt Exosomes Volcano.png", height = 10, width = 12, dpi = 1200)
results <- results(dds_exosomes, contrast = c("Patient", "4UG", "WT"))
results <- results(dds_exosomes, contrast = c("Patient", "4UG", "Wt"))
results_sig_E <- results %>%
filter(padj < 0.05, abs(log2FoldChange) > 1)
results <- as.data.frame(results)
results_sig_E <- results %>%
filter(padj < 0.05, abs(log2FoldChange) > 1)
write.csv(results_sig_E, "Significant miRNAs 4UG Exosomes vs Wt Exosomes.csv")
top_genes <- head(results_sig_E[order(results_sig_E$padj), ], 10)
gene_labs <- row.names(top_genes)
View(results_sig_E)
EnhancedVolcano(results,
x = "log2FoldChange",
y = "padj",
lab = row.names(results),
selectLab  = c(gene_labs),
FCcutoff = 1,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-11,22),
ylim = c(0, -log10(10e-112)),
labSize = 5.0,
pointSize = 5.0,
boxedLabels = TRUE)
ggsave("miRNA 4VG Exosomes vs Wt Exosomes Volcano.png", height = 10, width = 12, dpi = 1200)
# Provide a sample metadata template for download
output$download_metadata_template <- downloadHandler(
filename = function() { "metadata_template.csv" },
content = function(file) {
template <- data.frame(
sample = c("sample1", "sample2", "sample3"),
Treatment = c("Control", "Treatment", "Control"),
Condition = c("A", "A", "B"),
stringsAsFactors = FALSE
)
write.csv(template, file, row.names = FALSE)
}
)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/DESeq2 App')
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
library(DESeq2)
library(tidyverse)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(pheatmap)
library(viridis)
library(ggprism)
library(ggrepel)
library(EnhancedVolcano)
data <- read.csv(file = "Tutorial_Counts.csv", header = T, row.names = 1) #Load the count data with headers and geneid as row names
meta <- read.csv("Tutorial_Meta.csv", header = T) #load the column data file for Deseq2 with headers
row.names(data)<- substr(row.names(data), 1, 15) #Removes GeneID Version number from row names
data <- data[!duplicated(row.names(data)),] #Removing any duplicated genes
data[is.na(data)] <- 0 #Removing any N/A values
meta$Sample <- as.factor(meta$Sample)  # Changing metadata to factors
meta$Condition <- as.factor(meta$Condition)
mat_data <- as.matrix(data) # This changes the data frame of counts to a data matrix which is required for DEseq2
dds <- DESeqDataSetFromMatrix(countData = mat_data,  # Creating the DeseqDataSet
colData = meta,
design = ~ Condition)
dds <- DESeq(dds)  #Running Deseq on DeseqDataSet
vsd <- vst(dds) #Applying VST to prepare data for PCA
plotPCA(vsd, intgroup = c("Condition")) #Plotting a basic PCA with VST data
pcaData <- plotPCA(vsd, intgroup=c("Condition"), returnData=TRUE)    # Plotting a editable ggplot PCA and saving it using ggsave
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=Condition, label = meta$Sample)) +
geom_point(size=3) +
geom_label_repel()+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
ggsave("PCA of RNA-Seq Samples.png", dpi = 1200)
results <- results(dds, contrast = c("Condition", "Disease", "Control"))  # Extracting results from dds object
head(results)
anno <- AnnotationDbi::select(org.Hs.eg.db, rownames(results),            # Creating a gene ID key
columns = c("ENSEMBL", "ENTREZID", "SYMBOL", "GENENAME"),
keytype = "ENSEMBL")
results = cbind(ENSEMBL = rownames(results), results)      # Moving ENSEMBL gene ids to new column in results
anno_results <- left_join(as.data.frame(results), anno)   # Joining Gene ID Key and results data frame
head(anno_results)
results_sig <- anno_results %>%         # Filtering our anno_results data frame to get our significant differentially expressed genes
filter(padj < 0.05, abs(log2FoldChange) > 0.585)
write.csv(results_sig, "RNA-Seq Tutorial Significant Genes.csv")  #Saving csv of differentially expressed genes
top_genes <- head(results_sig[order(results_sig$padj), ], 10)  #Extracting top 10 significantly differentially expressed genes
gene_labs <- top_genes$SYMBOL  # Creating a list of their gene symbols
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-43)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot1.png", dpi = 1200, height = 12, width = 8)
heatmap_meta <- read.csv("Tutorial_meta.csv", row.names = 1)
row.names(results_sig)<- results_sig$ENSEMBL
runApp()
View(results_sig)
View(results)
View(results_sig)
print(min(results_sig$log2FoldChange) + 1)
print(min(results_sig$log2FoldChange))
print(max(results_sig$log2FoldChange) + 1)
print(max(results$log2FoldChange) + 1)
print(max(results_sig$log2FoldChange, na.rm = T) + 1)
print(max(results$log2FoldChange, na.rm = T) + 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
output$download_metadata_template <- downloadHandler(
filename = function() { "metadata_template.csv" },
content = function(file) {
template <- data.frame(
sample = c("sample1", "sample2", "sample3"),
Treatment = c("Control", "Treatment", "Control"),
Condition = c("A", "A", "B"),
stringsAsFactors = FALSE
)
write.csv(template, file, row.names = FALSE)
}
)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth-Curve-Analysis-Shiny-App')
runApp()
runApp()
runApp()
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
shiny::runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth-Curve-Analysis-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth-Curve-Analysis-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
source("C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App/App.R")
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
shiny::runApp()
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth-Curve-Analysis-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth-Curve-Analysis-Shiny-App')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth-Curve-Analysis-Shiny-App')
