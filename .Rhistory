# Remove cell types with all 0 values
df <- df[, colSums(df != 0) > 0]
# Reshape data for plotting
df_melt <- melt(df, id.vars = c("Sample", "Stage"))
# Create a list to store plots
plots <- list()
# Generate plots for each cell type
for(cell_type in unique(df_melt$variable)) {
p <- ggplot(subset(df_melt, variable == cell_type), aes(x = Stage, y = value)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 18) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) +
theme_minimal() +
labs(title = cell_type, y = "Abundance", x = "Stage")
plots[[cell_type]] <- p
}
# Combine all plots into one figure
combined_plot <- ggarrange(plotlist = plots, ncol = 3, nrow = ceiling(length(plots) / 3))
print(combined_plot)
ggsave("Ring Cell Proportions.png", dpi = 1200, height = 8, width = 12)
library(dplyr)
library(ggplot2)
library(reshape2)
library(ggpubr)
# Remove cell types with all 0 values
df <- df[, colSums(df != 0) > 0]
# Reshape data for plotting
df_melt <- melt(df, id.vars = c("Sample", "Stage"))
# Create a list to store plots
plots <- list()
# Generate plots for each cell type
for(cell_type in unique(df_melt$variable)) {
# Perform Wilcox test
p_value <- wilcox.test(value ~ Stage, data = subset(df_melt, variable == cell_type))$p.value
p <- ggplot(subset(df_melt, variable == cell_type), aes(x = Stage, y = value)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 18) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) +
theme_minimal(base_size = 12) +
theme(panel.background = element_rect(fill = "white", color = "black")) +
labs(title = cell_type, y = "Abundance", x = "Stage") +
geom_text(aes(label = ifelse(p_value < 0.05, "*", "")), x = 1.5, y = max(subset(df_melt, variable == cell_type)$value), vjust = -1)
plots[[cell_type]] <- p
}
library(dplyr)
library(ggplot2)
library(reshape2)
library(ggpubr)
# Remove cell types with all 0 values
df <- df[, colSums(df != 0) > 0]
# Reshape data for plotting
df_melt <- melt(df, id.vars = c("Sample", "Stage"))
# Create a list to store plots
plots <- list()
# Generate plots for each cell type
for(cell_type in unique(df_melt$variable)) {
# Perform ANOVA
aov_result <- aov(value ~ Stage, data = subset(df_melt, variable == cell_type))
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
p <- ggplot(subset(df_melt, variable == cell_type), aes(x = Stage, y = value)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 18) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) +
theme_minimal(base_size = 12) +
theme(panel.background = element_rect(fill = "white", color = "black")) +
labs(title = cell_type, y = "Abundance", x = "Stage") +
geom_text(aes(label = ifelse(p_value < 0.05, "*", "")), x = 1.5, y = max(subset(df_melt, variable == cell_type)$value), vjust = -1)
plots[[cell_type]] <- p
}
# Combine all plots into one figure
combined_plot <- ggarrange(plotlist = plots, ncol = 3, nrow = ceiling(length(plots) / 3))
print(combined_plot)
ggsave("Ring Cell Proportions.png", dpi = 1200, height = 8, width = 12)
View(aov_result)
library(dplyr)
library(ggplot2)
library(reshape2)
library(ggpubr)
# Remove cell types with all 0 values
df <- df[, colSums(df != 0) > 0]
# Reshape data for plotting
df_melt <- melt(df, id.vars = c("Sample", "Stage"))
# Order the stages
df_melt$Stage <- factor(df_melt$Stage, levels = c("CON", "IC", "CLI"))
# Create a list to store plots
plots <- list()
# Generate plots for each cell type
for(cell_type in unique(df_melt$variable)) {
# Perform ANOVA
aov_result <- aov(value ~ Stage, data = subset(df_melt, variable == cell_type))
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
p <- ggplot(subset(df_melt, variable == cell_type), aes(x = Stage, y = value, fill = Stage)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
stat_summary(fun = mean, geom = "bar", position = "dodge", color = "black") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) +
scale_fill_manual(values = c("CON" = "green", "IC" = "blue", "CLI" = "red")) +
theme_minimal(base_size = 12) +
labs(title = cell_type, y = "Abundance", x = "Stage") +
geom_text(aes(label = ifelse(p_value < 0.05, "*", "")), x = 1.5, y = max(subset(df_melt, variable == cell_type)$value), vjust = -1)
plots[[cell_type]] <- p
}
# Combine all plots into one figure with a white background
combined_plot <- ggarrange(plotlist = plots, ncol = 3, nrow = ceiling(length(plots) / 3))
combined_plot <- annotate_figure(combined_plot, theme = theme(plot.background = element_rect(fill = "white", color = NA)))
library(dplyr)
library(ggplot2)
library(reshape2)
library(ggpubr)
# Remove cell types with all 0 values
df <- df[, colSums(df != 0) > 0]
# Reshape data for plotting
df_melt <- melt(df, id.vars = c("Sample", "Stage"))
# Order the stages
df_melt$Stage <- factor(df_melt$Stage, levels = c("CON", "IC", "CLI"))
# Create a list to store plots
plots <- list()
# Generate plots for each cell type
for(cell_type in unique(df_melt$variable)) {
# Perform ANOVA
aov_result <- aov(value ~ Stage, data = subset(df_melt, variable == cell_type))
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
p <- ggplot(subset(df_melt, variable == cell_type), aes(x = Stage, y = value, fill = Stage)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
stat_summary(fun = mean, geom = "bar", position = "dodge", color = "black") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) +
scale_fill_manual(values = c("CON" = "green", "IC" = "blue", "CLI" = "red")) +
theme_minimal(base_size = 12) +
labs(title = cell_type, y = "Abundance", x = "Stage") +
geom_text(aes(label = ifelse(p_value < 0.05, "*", "")), x = 1.5, y = max(subset(df_melt, variable == cell_type)$value), vjust = -1)
plots[[cell_type]] <- p
}
# Combine all plots into one figure with a white background
combined_plot <- ggarrange(plotlist = plots, ncol = 3, nrow = ceiling(length(plots) / 3))
combined_plot <- combined_plot + theme(plot.background = element_rect(fill = "white", color = NA))
print(combined_plot)
ggsave("Ring Cell Proportions.png", dpi = 1200, height = 8, width = 12)
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Calculate the average and standard error for each Stage
summary_df <- df_filtered %>%
group_by(Stage) %>%
summarise(across(-Sample, list(mean = mean, se = ~ sd(.)/sqrt(n())), .names = "{col}_{fn}"))
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance") %>%
group_by(Cell_Type) %>%
summarise(p_value = kruskal_test(Abundance ~ Stage)$p)
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Calculate the average and standard error for each Stage
summary_df <- df_filtered %>%
group_by(Stage) %>%
summarise(across(-Sample, list(mean = mean, se = ~ sd(.)/sqrt(n())), .names = "{col}_{fn}"))
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance") %>%
group_by(Cell_Type) %>%
summarise(test = list(kruskal_test(data = cur_data(), Abundance ~ Stage))) %>%
unnest(cols = c(test)) %>%
select(Cell_Type, p = p)
# Adjust p-values for multiple testing
kruskal_results <- kruskal_results %>% mutate(p_adj = p.adjust(p, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>% pivot_longer(-Stage, names_to = "Metric", values_to = "Value") %>%
separate(Metric, into = c("Cell_Type", "Stat"), sep = "_") %>%
pivot_wider(names_from = "Stat", values_from = "Value") %>%
left_join(kruskal_results, by = "Cell_Type")
# Plot
plot_data <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
ggplot(plot_data, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = summary_long, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = summary_long, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Calculate the average and standard error for each Stage
summary_df <- df_filtered %>%
group_by(Stage) %>%
summarise(across(-Sample, list(mean = mean, se = ~ sd(.)/sqrt(n())), .names = "{col}_{fn}")) %>%
pivot_longer(-Stage, names_to = "Metric", values_to = "Value") %>%
separate(Metric, into = c("Cell_Type", "Stat"), sep = "_") %>%
pivot_wider(names_from = "Stat", values_from = "Value")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance") %>%
group_by(Cell_Type) %>%
summarise(p_value = kruskal_test(Abundance ~ Stage, data = cur_data())$p) %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Ensure numeric values for plotting
summary_long <- summary_long %>% mutate(mean = as.numeric(mean), se = as.numeric(se))
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Calculate the average and standard error for each Stage
summary_df <- df_filtered %>%
group_by(Stage) %>%
summarise(across(-Sample, list(mean = mean, se = ~ sd(.)/sqrt(n())), .names = "{col}_{fn}")) %>%
pivot_longer(-Stage, names_to = "Metric", values_to = "Value") %>%
separate(Metric, into = c("Cell_Type", "Stat"), sep = "_") %>%
pivot_wider(names_from = "Stat", values_from = "Value") %>%
mutate(mean = as.numeric(mean), se = as.numeric(se))
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Calculate the average and standard error for each Stage
summary_df <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance") %>%
group_by(Stage, Cell_Type) %>%
summarise(mean = mean(Abundance, na.rm = TRUE),
se = sd(Abundance, na.rm = TRUE) / sqrt(n()), .groups = "drop")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance") %>%
group_by(Cell_Type) %>%
summarise(p_value = list(kruskal_test(Abundance ~ Stage, data = cur_data())$p)) %>%
unnest(cols = c(p_value)) %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Prepare data for plotting
plot_data <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
# Plot
ggplot(plot_data, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = summary_long, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = summary_long, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Reshape data to long format
long_df <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
# Calculate the average and standard error for each Stage
summary_df <- long_df %>%
group_by(Stage, Cell_Type) %>%
summarise(mean = mean(Abundance, na.rm = TRUE),
se = sd(Abundance, na.rm = TRUE) / sqrt(n()), .groups = "drop")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- long_df %>%
group_by(Cell_Type) %>%
summarise(p_value = kruskal_test(Abundance ~ Stage, data = cur_data())$p, .groups = "drop") %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Plot
ggplot(long_df, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = summary_long, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = summary_long, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
View(long_df)
remove.packages("rlang")
install.packages("rlang")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% dplyr::select(where(~ any(. != 0)))
df <- read.csv("CIBERSORTx_Job3_Results.csv", header = T)
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Reshape data to long format
long_df <- df_filtered %>%
pivot_longer(-c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
# Calculate the average and standard error for each Stage
summary_df <- long_df %>%
group_by(Stage, Cell_Type) %>%
summarise(mean = mean(Abundance, na.rm = TRUE),
se = sd(Abundance, na.rm = TRUE) / sqrt(n()), .groups = "drop")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- long_df %>%
group_by(Cell_Type) %>%
summarise(p_value = kruskal_test(Abundance ~ Stage, data = cur_data())$p, .groups = "drop") %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Plot
ggplot(long_df, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = summary_long, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = summary_long, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Load data
df <- read.csv("your_data.csv")
library(dplyr)
library(ggplot2)
library(tidyr)
library(rstatix)
# Remove cell types with all zero values
df_filtered <- df %>% select(where(~ any(. != 0)))
# Reshape data to long format
long_df <- df_filtered %>%
pivot_longer(cols = -c(Sample, Stage), names_to = "Cell_Type", values_to = "Abundance")
# Calculate the average and standard error for each Stage
summary_df <- long_df %>%
group_by(Stage, Cell_Type) %>%
summarise(mean = mean(Abundance, na.rm = TRUE),
se = sd(Abundance, na.rm = TRUE) / sqrt(n()), .groups = "drop")
# Perform Kruskal-Wallis test for each cell type
kruskal_results <- long_df %>%
group_by(Cell_Type) %>%
summarise(p_value = kruskal_test(data = cur_data(), formula = Abundance ~ Stage)$p, .groups = "drop") %>%
mutate(p_adj = p.adjust(p_value, method = "BH"))
# Merge results with summary data
summary_long <- summary_df %>%
left_join(kruskal_results, by = "Cell_Type")
# Ensure numeric conversion
df_plot <- summary_long %>%
mutate(mean = as.numeric(mean), se = as.numeric(se))
# Plot
ggplot(long_df, aes(x = Stage, y = Abundance, color = Stage)) +
geom_jitter(width = 0.2, alpha = 0.5) +
geom_point(data = df_plot, aes(x = Stage, y = mean), size = 3, color = "black") +
geom_errorbar(data = df_plot, aes(x = Stage, ymin = mean - se, ymax = mean + se), width = 0.2, color = "black") +
facet_wrap(~Cell_Type, scales = "free_y") +
theme_minimal() +
labs(y = "Cell Type Proportion", x = "Stage", title = "Cell Type Abundance by Stage")
rlang::last_trace()
View(df_plot)
shiny::runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Growth Curve Shiny App/Growth-Curve-Analysis-Shiny-App')
library(rsconnect)
rsconnect::deployApp("C://Users//andym//OneDrive - University of Georgia//Documents//Growth Curve Shiny App//Growth-Curve-Analysis-Shiny-App")
library(shiny); runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
library(shiny); runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
library(rsconnect)
rsconnect::deployApp("C://Users//andym//OneDrive - University of Georgia//Documents//Growth Curve Shiny App//Growth-Curve-Analysis-Shiny-App")
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/App_V2.R')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Growth Curve Shiny App/Growth-Curve-Analysis-Shiny-App')
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Format the UI with bslib theme customization
ui <- fluidPage(
# Define a custom Bootstrap theme using bslib
theme = bs_theme(
bootswatch = "slate"  # Bootswatch theme for a modern look
),
titlePanel("Cell Growth Analysis Tool"),
sidebarLayout(
sidebarPanel(
HTML('<img src="logo.png" width="100%" height="auto">'),
downloadButton("downloadTemplate", "Download Template"),
fileInput("data", "Upload Growth Data (CSV)", accept = ".csv"),
actionButton("recommendTest", "Recommend Best Test"),
textOutput("recommendedTest"),
selectInput("statTest", "Select Statistical Test",
choices = c(
"None" = "none",
"T-test" = "t.test",
"ANOVA" = "anova",
"Welch's ANOVA" = "welch.anova",
"Kruskal-Wallis" = "kruskal",
"Pairwise Wilcoxon" = "wilcox"
)
),
# Inputs for plot customization
textInput("plotTitle", "Plot Title", value = "Cell Growth Over Time"),
textInput("xLabel", "X-axis Label", value = "Time (Hours)"),
textInput("yLabel", "Y-axis Label", value = "Mean Growth (Millions of Cells)"),
actionButton("goButton", "Run Analysis"),
downloadButton("downloadPlot", "Download Plot"),
br(),
br(),
downloadButton("downloadResults", "Download Text Results"),
br(),
br(),
tags$p("Created by Andy Ring"),
tags$p("Version 1.0.1 | February, 7th 2025")
),
mainPanel(
layout_columns(
card(card_header("Growth Plot"),
plotOutput("growthPlot")),
card(card_header("Statistical Test Results"),
tableOutput("statsTable")),
card(card_header("Regression Equations"),
tableOutput("regressionEquations")),  # Table for regression equations
card(card_header("Growth Calculations"),
tableOutput("growthMetrics")),  # Table for doubling time and growth rate
col_widths = c(12, 4, 4, 4)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("themeatic")
# Helper Function to Determine Significance Labels
significance_labels <- function(p_value) {
if (is.na(p_value)) {
return("ns")
} else if (p_value < 0.001) {
return("***")
} else if (p_value < 0.01) {
return("**")
} else if (p_value < 0.05) {
return("*")
} else {
return("ns")
}
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Run the Shiny App
shinyApp(ui = ui, server = server)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Load Required Libraries
library(shiny)
runApp('test.R')
shiny::runApp()
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/miRNA Seq Analysis/6600-439100757')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/miRNA Seq Analysis/6600-439100757')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/miRNA Seq Analysis/6600-439100757')
runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/miRNA Seq Analysis/6600-439100757')
shiny::runApp()
runApp()
rsconnect::writeManifest()
shiny::runApp('C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App')
rsconnect::writeManifest()
rsconnect::writeManifest()
setwd("C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App")
setwd("C:/Users/andym/OneDrive - University of Georgia/Documents/Shiny Apps/Dose-Response-Shiny-App")
rsconnect::writeManifest()
